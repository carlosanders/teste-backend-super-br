version: '3'
services:
    php-dev:
        container_name: php-dev
        build:
            context: .
            dockerfile: docker/dev/php/DockerFile
        environment:
            XDEBUG_CONFIG: client_host=192.168.1.5    # docker network ip. No OSX usar host.docker.internal, no Ubuntu usar 'ip a' para verificar (em geral 172.17.0.1). Ao alterar o IP, é necessário reconstruir a imagem. Confirme config do xdebug no phpinfo()
            PHP_IDE_CONFIG: serverName=xdebug-docker # phpstorm variavel de ambiente com o nome do server configurado. No VSCODE, manter mesmo valor
            XDEBUG_SESSION: docker
            XDEBUG_TRIGGER: 1
            NEWRELIC_APP_NAME: "supp"
            NEWRELIC_LICENSE_KEY: ~
        depends_on:
            - redis
            - mysql
            - elasticsearch
            - mercure-php
            - logstash
            - kibana
            - rabbitmq
            - ldap
        ports:
            - '8000:8000'
        volumes:
            - '.:/app'
        tty: true
        command: tail -f /dev/null
        links:
            - redis
            - mysql
            - elasticsearch
            - mercure-php
            - rabbitmq
        networks:
            supp_network:
                ipv4_address: 192.168.0.10

    rabbitmq:
        container_name: rabbitmq
        hostname: rabbitmq
        image: rabbitmq:3.11.5-management
        environment:
            RABBITMQ_CONFIG_FILE: /etc/rabbitmq/custom/rabbitmq.conf
        ports:
            - '5672:5672'
            - '15672:15672'
        volumes:
            - './docker/dev/rabbit:/etc/rabbitmq/custom'
        networks:
            supp_network:
                ipv4_address: 192.168.0.26

    logstash:
        container_name: logstash
        build:
            context: .
            dockerfile: docker/logstash/DockerFile
        tty: true
        command: tail -f /dev/null
        links:
            - redis
            - elasticsearch
        networks:
            supp_network:
                ipv4_address: 192.168.0.13

    kibana:
        container_name: kibana
        image: opensearchproject/opensearch-dashboards:2.4.1
        ports:
            - '5601:5601'
        expose:
            - '5601'
        environment:
            - 'OPENSEARCH_HOSTS=["http://elasticsearch:9200"]'
            - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
        networks:
            supp_network:
                ipv4_address: 192.168.0.14

    redis:
        container_name: redis
        image: eqalpha/keydb:alpine_x86_64_v6.3.1
        hostname: redis
            - "6379:6379"
        ports:
            - 6379:6379
        networks:
            supp_network:
                ipv4_address: 192.168.0.12

    mysql:
        container_name: mysql
        build:
            context: .
            dockerfile: docker/dev/mysql/DockerFile
        restart: always
        hostname: mysql
        command: --default-authentication-plugin=mysql_native_password
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: supp
        volumes:
            - 'mysql-data:/mysql'
        ports:
            - 3306:3306
        networks:
            supp_network:
                ipv4_address: 192.168.0.19

    elasticsearch:
        container_name: elasticsearch
        hostname: elasticsearch
        build:
            context: .
            dockerfile: docker/elasticsearch/DockerFile
        ports:
            - '9200:9200'
            - '9300:9300'
            - '9600:9600'
        environment:
            - 'node.name=es01'
            - 'cluster.name=docker-cluster'
            - 'discovery.type=single-node'
            - 'bootstrap.memory_lock=true'
            - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
            - 'DISABLE_SECURITY_PLUGIN=true'
        ulimits:
            nofile:
                soft: 65535
                hard: 65535
            memlock:
                soft: -1
                hard: -1
        networks:
            supp_network:
                ipv4_address: 192.168.0.21

    maintenance:
        container_name: maintenace
        build:
            context: .
            dockerfile: docker/maintenance/Dockerfile
        tty: true
        command: tail -f /dev/null
        networks:
            supp_network:
                ipv4_address: 192.168.0.31

    ldap:
        container_name: ldap
        build:
            context: docker/dev/ldap
        ports:
            - 389:389
            - 10389:10389
        networks:
            supp_network:
                ipv4_address: 192.168.0.22

    php-prod:
        container_name: php-prod
        environment:
            APP_ENV: "prod"
            APP_DEBUG: 0
        build:
            context: .
            dockerfile: docker/prod/DockerFile
        ports:
            - '8000:8000'
        volumes:
            - '.:/var/www/html'
        tty: true
        command: tail -f /dev/null
        networks:
            supp_network:
                ipv4_address: 192.168.0.29

    # trata-se de imagem protegida por licença, então é necessário criar uma conta no dockerhub
    # acessar a pagina https://hub.docker.com/_/oracle-database-enterprise-edition, logar e aceitar a licença
    # sudo docker login usuario
    # sudo docker pull store/oracle/database-enterprise:12.2.0.1
    # e so ai subir o container
    # sudo docker exec -it oracledb bash -c "source /home/oracle/.bashrc; sqlplus /nolog"
    # connect sys as sysdba; # Oradoc_db1
    # alter session set "_ORACLE_SCRIPT"=true;
    # create user supp identified by supp;
    # GRANT ALL PRIVILEGES TO supp;
    # .env
    # DATABASE_URL=oci8://supp:supp@oracledb:1521/ORCLCDB.localdomain
    # DATABASE_SERVICE=true
    # (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=oracledb)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=ORCLCDB.localdomain)))
    oracledb:
        container_name: oracledb
        hostname: oracledb
        image: store/oracle/database-enterprise:12.2.0.1
        volumes:
            - oracle-data:/ORCL
        ports:
            - '1521:1521'
            - '5500:5500'
        networks:
            supp_network:
                ipv4_address: 192.168.0.30
#
    mercure-php:
        container_name: mercure-php
        restart: unless-stopped
        image: progmancod/mercure-php:0.2.3
        environment:
            X_LISTEN: '0.0.0.0:4001'
            ALLOW_ANONYMOUS: 0
            JWT_SECRET_KEY: 'hs7wrlLIHEFW983Ljkehf89feoir9p8735hakljhqwr985lhwre'
            TRANSPORT_DSN: 'redis://redis:6379'
            APP_ENV: 'prod'
            APP_DEBUG: 0
        ports:
            - '4000:4000'
        tty: true
        command: tail -f /dev/null
        networks:
            supp_network:
                ipv4_address: 192.168.0.32

networks:
    supp_network:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 192.168.0.0/24

volumes:
    mysql-data:
    oracle-data:
